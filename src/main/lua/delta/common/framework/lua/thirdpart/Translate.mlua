import "Turbine.Type"
-- import "Turbine"

require "metalua.compiler.globals"
local pp = require 'metalua.pprint'
-{ extension ("match", ...) }

local inspect = import "inspect"

Translate = class();

function Translate:Constructor(...)
  _multilocalesTranslator = localizedPlugin:InitMultilocalesTranslator(...)
end

function Translate:readFile(fileName)
  local fileHandle, err = io.open(fileName,"rt")
  local luaSource = fileHandle:read("*all")
  fileHandle:close()
  return luaSource, err
end

function Translate:Save(data)
  local file, e = io.open("meu.lua", "w")
  if not file then
    return error(e)
  end

  file:write(pickle(data))

  file:close()
end

function Translate:Parse(fileName, locale)
  local fullFileName = localizedPlugin:GetPluginsPath() .. fileName
  print("load: " .. fullFileName)
  local script, err = self:readFile(fullFileName)
  if not script then
    print("err: " .. err)
    return
  end

  -- Check code validity
  local status, err = loadstring(script, "isCodeValid")
  if not status then
    print("err: " .. err)
    return
  end

  local metaluaCompiler = require "metalua.compiler".new()

  local ast = metaluaCompiler:src_to_ast(script)

  self:ParseAst(script, ast, locale)
  -- local formatter = require 'FormatLua.formatter'
  
  -- print(formatter.indentcode(script, ast, '\n', true, '    '))
  -- print(metaluaCompiler:ast_to_src(ast))
end

function Translate:ParseAst(script, ast, locale)
  local treeQuery = require "metalua.treequery"
  treeQuery.debug = true
  
  local translator = _multilocalesTranslator:GetTranslator(locale)

  treeQuery(ast):filter "Set":foreach(function (node, x_parent)
     pp.printf("traverse %s", node)
     match node with
      | `Set{ { `Index{refTable, `String{translateKey}}} , {`String{translateValue}} } -> 
          -- print(refTable[1].."["..translateKey.."] = "..translateValue)
          if (node.lineinfo.first.comments ~= nil) then
            translator:SetComment(translateKey, node.lineinfo.first.comments[1][1])
          end
          translator:SetTranslation(translateKey, translateValue)
      | _ -> print("no match") -- assert(false) -- impossible, pred filtered those out
      end
  end) 
  
  --print(inspect(matchNodes))
end
